package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"strconv"

	"github.com/rimkahan888/rimkahan888/game"
)

var currentGame *game.Game

// GameState represents the current state of the game for JSON responses
type GameState struct {
	Board         [][]string `json:"board"`
	ToPlay        string     `json:"toPlay"`
	BlackCaptures int        `json:"blackCaptures"`
	WhiteCaptures int        `json:"whiteCaptures"`
	GameOver      bool       `json:"gameOver"`
	Winner        string     `json:"winner"`
	LastMove      *MoveInfo  `json:"lastMove"`
	Size          int        `json:"size"`
}

// MoveInfo represents move information for JSON
type MoveInfo struct {
	Player string `json:"player"`
	Row    int    `json:"row"`
	Col    int    `json:"col"`
	Pass   bool   `json:"pass"`
}

func main() {
	// Initialize a new game
	currentGame = game.NewGame(19)

	// Serve static files
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))

	// Routes
	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/api/game-state", gameStateHandler)
	http.HandleFunc("/api/place-stone", placeStoneHandler)
	http.HandleFunc("/api/pass", passHandler)
	http.HandleFunc("/api/new-game", newGameHandler)

	fmt.Println("Go Game Server starting on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl := `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Go Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .board-cell {
            width: 30px;
            height: 30px;
            border: 1px solid #8B4513;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            background-color: #DEB887;
            position: relative;
        }
        .board-cell:hover {
            background-color: #F5DEB3;
        }
        .stone {
            width: 26px;
            height: 26px;
            border-radius: 50%;
            border: 2px solid #333;
        }
        .black-stone {
            background-color: #1F2937;
        }
        .white-stone {
            background-color: #F9FAFB;
        }
        .board-grid {
            display: grid;
            grid-template-columns: repeat(19, 30px);
            gap: 0;
            border: 2px solid #8B4513;
            background-color: #DEB887;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold text-center mb-8 text-gray-800">Go Game (Weiqi/Baduk)</h1>
        
        <div class="flex flex-col lg:flex-row gap-8 items-start justify-center">
            <!-- Game Board -->
            <div class="flex flex-col items-center">
                <div class="mb-4">
                    <h2 class="text-xl font-semibold text-gray-700 text-center">
                        Current Player: <span id="current-player" class="font-bold">Black</span>
                    </h2>
                </div>
                
                <div class="board-grid" id="game-board">
                    <!-- Board will be generated by JavaScript -->
                </div>
            </div>
            
            <!-- Game Controls and Info -->
            <div class="bg-white rounded-lg shadow-lg p-6 min-w-[300px]">
                <h3 class="text-xl font-semibold mb-4 text-gray-800">Game Status</h3>
                
                <div class="space-y-3 mb-6">
                    <div class="flex justify-between">
                        <span class="text-gray-600">Black Captures:</span>
                        <span id="black-captures" class="font-semibold">0</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">White Captures:</span>
                        <span id="white-captures" class="font-semibold">0</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Game Status:</span>
                        <span id="game-status" class="font-semibold text-green-600">In Progress</span>
                    </div>
                </div>
                
                <div class="space-y-3">
                    <button onclick="passMove()" 
                            class="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-2 px-4 rounded transition duration-200">
                        Pass
                    </button>
                    <button onclick="newGame()" 
                            class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded transition duration-200">
                        New Game
                    </button>
                </div>
                
                <div class="mt-6 p-4 bg-gray-50 rounded">
                    <h4 class="font-semibold text-gray-700 mb-2">How to Play:</h4>
                    <ul class="text-sm text-gray-600 space-y-1">
                        <li>• Click to place stones</li>
                        <li>• Surround opponent stones to capture</li>
                        <li>• Can't place stones without liberties</li>
                        <li>• Pass when you can't/don't want to move</li>
                        <li>• Game ends when both players pass</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script>
        let gameState = {};

        // Initialize the game
        async function initGame() {
            await updateGameState();
            renderBoard();
        }

        // Update game state from server
        async function updateGameState() {
            try {
                const response = await fetch('/api/game-state');
                gameState = await response.json();
                updateUI();
            } catch (error) {
                console.error('Error updating game state:', error);
            }
        }

        // Render the game board
        function renderBoard() {
            const board = document.getElementById('game-board');
            board.innerHTML = '';
            
            for (let row = 0; row < gameState.size; row++) {
                for (let col = 0; col < gameState.size; col++) {
                    const cell = document.createElement('div');
                    cell.className = 'board-cell';
                    cell.onclick = () => placeStone(row, col);
                    
                    const stone = gameState.board[row][col];
                    if (stone === '●') {
                        const stoneDiv = document.createElement('div');
                        stoneDiv.className = 'stone black-stone';
                        cell.appendChild(stoneDiv);
                    } else if (stone === '○') {
                        const stoneDiv = document.createElement('div');
                        stoneDiv.className = 'stone white-stone';
                        cell.appendChild(stoneDiv);
                    }
                    
                    board.appendChild(cell);
                }
            }
        }

        // Update UI elements
        function updateUI() {
            document.getElementById('current-player').textContent = gameState.toPlay;
            document.getElementById('black-captures').textContent = gameState.blackCaptures;
            document.getElementById('white-captures').textContent = gameState.whiteCaptures;
            
            const statusElement = document.getElementById('game-status');
            if (gameState.gameOver) {
                statusElement.textContent = "Game Over - Winner: " + gameState.winner;
                statusElement.className = 'font-semibold text-red-600';
            } else {
                statusElement.textContent = 'In Progress';
                statusElement.className = 'font-semibold text-green-600';
            }
        }

        // Place a stone
        async function placeStone(row, col) {
            if (gameState.gameOver) return;
            
            try {
                const response = await fetch('/api/place-stone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ row, col })
                });
                
                const result = await response.json();
                if (result.success) {
                    await updateGameState();
                    renderBoard();
                } else {
                    alert(result.error || 'Invalid move');
                }
            } catch (error) {
                console.error('Error placing stone:', error);
                alert('Error placing stone');
            }
        }

        // Pass move
        async function passMove() {
            if (gameState.gameOver) return;
            
            try {
                const response = await fetch('/api/pass', { method: 'POST' });
                const result = await response.json();
                if (result.success) {
                    await updateGameState();
                    renderBoard();
                }
            } catch (error) {
                console.error('Error passing:', error);
            }
        }

        // Start new game
        async function newGame() {
            try {
                const response = await fetch('/api/new-game', { method: 'POST' });
                const result = await response.json();
                if (result.success) {
                    await updateGameState();
                    renderBoard();
                }
            } catch (error) {
                console.error('Error starting new game:', error);
            }
        }

        // Initialize when page loads
        window.onload = initGame;
    </script>
</body>
</html>`

	t, err := template.New("index").Parse(tmpl)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	err = t.Execute(w, nil)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func gameStateHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	
	state := convertGameState(currentGame)
	json.NewEncoder(w).Encode(state)
}

func placeStoneHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var move struct {
		Row int `json:"row"`
		Col int `json:"col"`
	}

	if err := json.NewDecoder(r.Body).Decode(&move); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	err := currentGame.PlaceStone(move.Row, move.Col)
	
	response := map[string]interface{}{
		"success": err == nil,
	}
	
	if err != nil {
		response["error"] = err.Error()
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func passHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	currentGame.Pass()

	response := map[string]interface{}{
		"success": true,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func newGameHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// Get size from query parameter, default to 19
	sizeStr := r.URL.Query().Get("size")
	size := 19
	if sizeStr != "" {
		if s, err := strconv.Atoi(sizeStr); err == nil && s >= 5 && s <= 25 {
			size = s
		}
	}

	currentGame = game.NewGame(size)

	response := map[string]interface{}{
		"success": true,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func convertGameState(g *game.Game) GameState {
	// Convert board to string representation
	board := make([][]string, g.Board.Size)
	for i := range board {
		board[i] = make([]string, g.Board.Size)
		for j := range board[i] {
			stone := g.Board.GetStone(game.Position{Row: i, Col: j})
			board[i][j] = stone.String()
		}
	}

	toPlay := "Black"
	if g.Board.ToPlay == game.White {
		toPlay = "White"
	}

	winner := ""
	if g.Winner == game.Black {
		winner = "Black"
	} else if g.Winner == game.White {
		winner = "White"
	}

	var lastMove *MoveInfo
	if g.LastMove != nil {
		player := "Black"
		if g.LastMove.Player == game.White {
			player = "White"
		}
		lastMove = &MoveInfo{
			Player: player,
			Row:    g.LastMove.Position.Row,
			Col:    g.LastMove.Position.Col,
			Pass:   g.LastMove.Pass,
		}
	}

	return GameState{
		Board:         board,
		ToPlay:        toPlay,
		BlackCaptures: g.BlackCaptures,
		WhiteCaptures: g.WhiteCaptures,
		GameOver:      g.GameOver,
		Winner:        winner,
		LastMove:      lastMove,
		Size:          g.Board.Size,
	}
}